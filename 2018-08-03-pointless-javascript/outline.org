* Intro
  Pointless JavaScript
  Mark Borcherding
* My contact information
  :slack: mark.borcherding
  :octocat: mark.borcherding
* Other title 
** Point Free JavaScript
* Other Other Title
** elevating the readability of JavaScript using functional composition, partial function application and currying....and without function parameters.
* Other^3 Title
** elevating the readability of JavaScript or Scala using functional composition, partial function application and currying....and without function parameters.
* Disclaimer
  not a js expert
  not a functional expert
  not an expert
* I'm not sure coworkers have really taken to this
  it's unfamiliar
  
   > Familiarity can be acquired; complexity is intrinsic.
    - https://sanctuary.js.org
    
  it feels less clear
* How could this fail with an introduction like that
* What is Point Free programming
 ...it's tacit programming
 
* What is tacit programming
 ...writing function that don't deine arguments
 
mandatory wikipedia quote:
 
 Tacit programming, also called point-free style, is a programming paradigm in
 which function definitions do not identify the arguments (or "points") on which
 they operate. Instead the definitions merely compose other functions, among
 which are combinators that manipulate the arguments.
 
 - https://en.wikipedia.org/wiki/Tacit_programming
 
* Example function
   
  #+BEGIN_SRC js
    const struckOut = (pitches) => { return pitches.filter( x => x === 'K').length === 3 };
  #+END_SRC
  
* Find the point
** The dots?
   
  #+BEGIN_SRC js
    const struckOut = (pitches) => { return pitches.filter( x => x === 'K').length === 3 };
    //                                             ?                       ?
  #+END_SRC
  
** Nope
   
  #+BEGIN_SRC js
    const struckOut = (pitches) => { return pitches.filter( x => x === 'K').length === 3 };
    //                                             X                       X
  #+END_SRC
  
** The stabby arrows?
   
  #+BEGIN_SRC js
    const struckOut = (pitches) => { return pitches.filter( x => x === 'K').length === 3 };
    //                          ??                            ??
  #+END_SRC
  
** Nope
   
  #+BEGIN_SRC js
    const struckOut = (pitches) => { return pitches.filter( x => x === 'K').length === 3 };
    //                          XX                            XX
  #+END_SRC
  
** Everything you're saying?
   
  #+BEGIN_SRC js
    const struckOut = (pitches) => { return pitches.filter( x => x === 'K').length === 3 };
    //    ?????????????????????????????????????????????????????????????????????????????????
  #+END_SRC
  
** Maybe....but no.
   
  #+BEGIN_SRC js
    const struckOut = (pitches) => { return pitches.filter( x => x === 'K').length === 3 };
    //    XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  #+END_SRC
  
** The function arguments
   
  #+begin_src js
    const struckout = (pitches) => { return pitches.filter( x => x === 'k').length === 3 };
    //                ^^^^^^^^^                             ^  
  #+end_src

* Point-free
   
  #+BEGIN_SRC js
    const struckOut = compose(isEqual(3), count, where(isStrike))
    // struckOut = Number -> Boolean

    struckOut(2) // => false
  #+END_SRC
   
* Mention how we are going to remove the points and the code will be easier to read
  Small, multipurpose functions and build up more complex ones

* What does it do?
  
  #+BEGIN_SRC js
    const ???????? = function(params) {
      var provided = []
      for(var key in params) {
        if(params[key] != undefined){
          provided.push(lib.encode(key) + "=" + lib.encode(params[key]))
        }
      }
      return provided.join("&")
    }
  #+END_SRC
  
* Hello Lodash
  Who doesn't love lodash?
  
*** https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore
    
https://lodash.com

* Example of better JS

  #+BEGIN_SRC javascript 
    const ?????? = (params) => {
      const a = _.map(params, (v,k) => [k,v])
      const b = _.filter(a, ([k, v]) => ! _.isUndefined(v))
      const c = _.map(b, ([k, v]) => [lib.encode(k), lib.encode(v)])
      const d = _.map(c, (pair) => pair.join("="))
      return d.join("&")
    }
  #+END_SRC
  
* Notice Shape

  #+BEGIN_SRC javascript
    const a = f(x)
    const b = g(a)
    const c = h(b)
  #+END_SRC

* Better even still with lodash

  #+BEGIN_SRC javascript
    const ?????? = (params) => {
      _.chain(params)
       .toPairs
       .filter(([k, v]) => ! _.isUndefined(v))
       .map(([k, v]) => [lib.encode(k), lib.encode(v)])
       .map((pair) => pair.join("="))
       .join("&")
       .value()
    }
  #+END_SRC

* Give function a name

  #+BEGIN_SRC javascript
    const querystringify = (params) => {
      _.chain(params)
       .toPairs
       .filter(([k, v]) => ! _.isUndefined(v))
       .map(([k, v]) => [lib.encode(k), lib.encode(v)])
       .map((pair) => pair.join("="))
       .join("&")
       .value()
    }
  #+END_SRC

* Example of how we think about it
  
* Write out the steps
  querystringify
    remove missing parameters
    encode the keys and values
    join keys and values with equals
    join the parameters with ampersand

* We need something like pipe in bash

  #+BEGIN_SRC sh
    ps -ef | grep "java" | awk '{ print $2}' | xargs kill -9
  #+END_SRC
    
* make up pipe

  #+BEGIN_SRC javascript
    querystringify = pipe(
      remove missing parameters,
      encode the keys and values,
      join keys and values with equals, 
      join the parameters with ampersand
    )
  #+END_SRC

* get a little closer to javascript

  #+BEGIN_SRC js
    querystringify = pipe(
      removeMissingParameters,
      encodeTheKeysAndValues,
      joinKeysAndValuesWithEquals, 
      joinParametersWithAmpersand
    )
  #+END_SRC

* Quick explanation of functional composition
  pipe takes a functions ~x->y~, ~y->z~
  return a new funtion that ~x->z~

* A really dumb version

  #+BEGIN_SRC javascript
    const pipe = (f,g,h) => {
      (x) => {
        return h(g(f(x)))
      }
    }
  #+END_SRC
  
* A really dumb version

  #+BEGIN_SRC javascript
    const pipe = (f,g,h) => x => h(g(f(x)))
  #+END_SRC
  
* give it a name

#+BEGIN_SRC javascript
  const querystringify = pipe(
    removeMissingParameters,
    encodeTheKeysAndValues,
    joinKeysAndValuesWithEquals,
    joinParametersWithAmpersand
  )
#+END_SRC

* a reduce over a collection of functions
  
  #+BEGIN_SRC js
  const pipe = funcs => x => funcs.reduce((v, f) => f(v), x)
  #+END_SRC
* a reduce over a collection of functions

  #+BEGIN_SRC js
  const f = pipe([x=>x+1, x=>x*10, x=> x +"!"])
  f(10) // '110!'
  #+END_SRC

* show it in other languages
  
  #+BEGIN_SRC sh
  ps -ef | grep java | awk '{print $2}' | kill
  #+END_SRC
  
* in scala

  #+BEGIN_SRC scala
    val queryStringify = 
      removeMissingParameters
        .andThen(encodeTheKeysAndValues)
        .andThen(joinKeysAndValuesWithEquals)
        .andThen(joinParametersWithAmpersand)
  #+END_SRC
    
  NOTE: methods vs function

* in Elixir

  #+BEGIN_SRC elixir 
    "Elixir rocks" |> 
    String.upcase() |> 
    String.split()
  #+END_SRC
  
* pipe
  
  left to right evaluation

  pipe(a,b,c) = c(b(a(x)))
  
* compose is the 
  
  right to left evaluation
  
  compose(a,b,c) = a(b(c(x)))
  
* silly library
      pipe = flow 
   compose = flowRight 
  
  ...called by no one...ever.
  
* Why have two difference

  depends on how you think
  
* Pipe thinks in steps of operations

  pipe(step1, step2, step3, step4)

* Compose reads more like english

  compose(average, homeruns, top10, nationalLeague, catchers)
  
* Pick one and stick with it

* review where we left it

  #+BEGIN_SRC javascript
    const querystringify = pipe(
      removeMissingParameters,
      encodeTheKeysAndValues,
      joinKeysAndValuesWithEquals,
      joinParametersWithAmpersand
    )
  #+END_SRC

* give them better names
** 1
  #+BEGIN_SRC javascript
    const querystringify = pipe(
      removeMissing,
      encodeTheKeysAndValues,
      joinKeysAndValuesWithEquals, 
      joinParametersWithAmpersand
    )
  #+END_SRC
** more better

  const querystringify = pipe(
    removeMissing,
    urlEncode,
    joinKeysAndValuesWithEquals, 
    joinParametersWithAmpersand
  )

** Even more betterest
  const querystringify = pipe(
    removeMissing,
    urlEncode,
    joinEquals,
    joinAmpersand,
  )

* point out the join methods sound similar
  const querystringify = pipe(
    removeMissing,
    urlEncode,
    joinEquals,
    joinAmpersand,
  )

* spoon on the curry

* A quick explanation of curry
  A function that returns another funcion
  

  #+BEGIN_SRC javascript
    const join = function(delim){
      return function(list) {
        return list.join(delim);
      }
    }
  #+END_SRC

* how normal people write it
  
  #+BEGIN_SRC javascript
    const join = delim => list => list.join(delim)
  #+END_SRC
  
* Why aren't we using lodash?
  
* lodash curry

  #+BEGIN_SRC javascript
    const fancy = _.curry((j,list) => list.join(j))
    fancy("-", [1,2,3]) // String: '1-2-3'
    fancy("-")([1,2,3]) // String: '1-2-3'
    const hyphenate = fancy("-") // [Function]
    hyphenate([1,2,3]) // String: '1-2-3'
  #+END_SRC

* limitations with lodash curry
  only fixed arity function
  
  variadic functions wouldn't know to execute or return function

* show it in other languages
  def join(j: String)(list: Seq[String]) = list.mkString(j)
  
  val join = (j:String) => (list:Seq[String]) = list.mkString(j)

  val join = ((j:String, list:Seq[String]) = list.mkString(j)).curried
  
  val join = (_:Seq[String]).mkString(_:String)

* show how we use it
  const join = j => list => list.join(j)

  const querystringify = pipe(
    removeMissing,
    urlEncode,
    join("="),
    join("&")
  )

* why didn't we use _.join

  _.join(array, [separator=','])
  
* two problems

1 data comes first
2 variadic functions makes it -hard- impossible to curry

* example

  const f = _.join([1,2,3]) // [Function] or "1,2,3"

* lodash fp

fp button

https://github.com/lodash/lodash/wiki/FP-Guide

* talk about lodash fp 
  
* data last

  fp.join(separator, array)
  
* fixed arity
  fixed arity ... no variadic 

  _.get(object, path, [defaultValue])
  
  fixed arity spawns aliases
  
  fp.get(path, object)
  fp.getOr(path, object, defaultValue)

* need two things
  const pipe = require('lodash/fp/pipe')
  const join = require('lodash/fp/join')
  
** 
  const pipe = require('lodash/fp/pipe')
  const join = require('lodash/fp/join')

  const querystringify = pipe(
    removeMissing,
    urlEncode,
    join("="), 
    join("&")
  )

* ....add array to avoid var args
  const {pipe, join} = require('lodash/fp')

  const querystringify = pipe([
    removeMissing,
    urlEncode,
    join("="),
    join("&")
  ])

* Just bring in all fp for now to show what we're using
  const fp = require('lodash/fp')

  const querystringify = fp.pipe([
    removeMissing,
    urlEncode,
    fp.join("="),
    fp.join("&")
  ])

* Use pipe again to build out removeMissing
  
#+BEGIN_SRC js

  const removeMissing = fp.pipe([
    fp.pairs, 
    fp.filter(([k,v]) => ! fp.isUndefined(v))
  ])

  const querystringify = fp.pipe([
    removeMissing,
    encode,
    fp.join("="),
    fp.join("&")
  ])

#+END_SRC

* Remove points

  const removeMissing = fp.pipe([
    fp.pairs, 
    fp.filter(
      fp.negate(
        fp.pipe(
          fp.at(1),
          fp.isUndefined)))
  ])
  
  const querystringify = fp.pipe([
    removeMissing,
    urlEncode,
    fp.join("="),
    fp.join("&")
  ])

* Give it a name
  
  const valueIsUndefined = fp.pipe(
                            fp.at(1),
                            fp.isUndefined))

  const removeMissing = fp.pipe([
    fp.pairs, 
    fp.filter(
      fp.negate(valueIsUndefined))
  ])
  
  const querystringify = fp.pipe([
    removeMissing,
    urlEncode,
    fp.join("="),
    fp.join("&")
  ])
  
* Even simpler

  const removeMissing = fp.pickBy(fp.negate(fp.isUndefined))
  
  const querystringify = fp.pipe([
    removeMissing,
    urlEncode,
    fp.join("="),
    fp.join("&")
  ])
  
* Deal with encode

  const encode = fp.map((v, k) => [lib.urlEncode(k), lib.urlEncode(v)]) 
  
  const querystringify = fp.pipe([
    removeMissing,
    urlEncode,
    fp.join("="),
    fp.join("&")
  ])

* Deal with encode

  const encode = fp.pipe(
                   fp.toPairs,
                   fp.map(
                    fp.map(lib.urlEncode)))
  
  const querystringify = fp.pipe([
    removeMissing,
    urlEncode,
    fp.join("="),
    fp.join("&")
  ])
  
* Review all

  #+BEGIN_SRC javascript
  const removeMissing = fp.pickBy(fp.negate(fp.isUndefined))

  const urlEncode = fp.pipe(
                      fp.toPairs,
                      fp.flatMap(lib.urlEncode),
                      fp.chunk(2))

  
  const querystringify = fp.pipe([
    removeMissing,
    urlEncode,
    fp.join("="),
    fp.join("&")
  ])
  #+END_SRC

* Extract new function


  #+BEGIN_SRC javascript 
    const removeMissing = fp.pickBy(fp.negate(fp.isUndefined))

    const mapKeyValue = f => fp.pipe(
                              fp.toPairs,
                              fp.flatMap(f),
                              fp.chunk(2))

    const querystringify = fp.pipe([
      removeMissing,
      mapKeyValue(lib.urlEncode),
      fp.join("="),
      fp.join("&")
    ])
  #+END_SRC

* Review all

  #+BEGIN_SRC javascript 

    // resuseable functions

    // {a: 1, b: undefined} -> {a: 1}
    const removeMissing = fp.pickBy(fp.negate(fp.isUndefined))

    // f -> {k: v, ...} -> [[f(k), f(v)], ...]
    const mapKeyValue = f => fp.pipe(
                              fp.toPairs,
                              fp.flatMap(f),
                              fp.chunk(2))

    // business code terse expressive
    const querystringify = fp.pipe([
      removeMissing,
      mapKeyValue(lib.urlEncode),
      fp.join("="),
      fp.join("&")
    ])

  #+END_SRC
  
* show some of the other lodash fp things
  
  #+BEGIN_SRC js
    fp.cond([
      [predicateFunction, applicativeFunction], 
      [ (x => x < 0), (x) => console.log(x, "is less than zero")], 
      [ fp.equals(0), someOtherFunction ], 
      [ fp.T,         thisIsTheDefaultFunction ]
    ])
  #+END_SRC

* show some of the other lodash fp things
  
  #+BEGIN_SRC javascript
    const isAction = name => (action, state) => name === action
    const incrementCount = (action, state) => state + 1

    export default = fp.cond([
      [isAction("CLICK_UP"),   incrementCount], 
      [isAction("CLICK_DOWN"), decrementCount], 
      [fp.T,                   previousState ]
    ])
  #+END_SRC
  
* firehose

  #+BEGIN_SRC js 
    const average = fp.compose(
                      fp.spread(fp.divide), 
                      fp.over([fp.sum, fp.size]))

    average([1,2]) // 1.5
  #+END_SRC
 
* spread 

  fp.spread = (x,y,z,... -> A) -> [x,y,z,...] -> A
  
  fp.spread(fp.divide) ([10,5]) // 2
  
* over
  
  fp.over = [(a->x), (a->y), ...] -> a -> [x,y]
  
  fp.over([fp.sum, fp.size]) ([10, 5]) // [15, 2]

* show partial function application
  
 _ placeholder in lodash 
 
 const f = fp.curry((a,b,c,d) => console.log({a,b,c,d}))

 > f(1,2,3,4)
 { a: 1, b: 2, c: 3, d: 4 }
 
 const g = f(1, fp.__, 3, fp.__)
 
 > g('b', 'd')
 { a: 1, b: 'b', c: 3, d: 'd' }

* show the example in scala
  val f = doSomething(1, _, 2)

* talk about ramda
  more methods

* show a bit of the rambda things
// https://adventofcode.com/2017/day/1 

const first = R.map(R.head)
const sum = R.sum
const matching = R.filter(([a, b]) => a === b)
const pairWith = f => R.converge(R.zip, [f, R.identity])

const cycle = R.curry((n, list) => {
  const [head, tail] = R.splitAt(n)(list)
  return [...tail, ...head]
})

const neighbors = cycle(1)

const inverseCaptcha = R.compose(
  sum,
  first,
  matching,
  pairWith(neighbors),
) 

* talk about sanctuary
* talk about trade offs
  typescript 

 shrug

* show debugging trick
  fp.pipe(
    doSomething, 
    fp.tap(debugger),
    otherThing)
   
* eslint for lodash fp
  
* mention to use this when you want...not always
* questions
